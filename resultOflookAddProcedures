Murphi Code:
---pat1: aenc{ < Na.A > }pk(B) 
procedure lookAddPat1(Na:NonceType; A:AgentType; B:AgentType; Var msg:Message; Var num : indexType);
  Var msg1, msg2: Message;
  index,i1,i2:indexType;
  begin
   index:=0;
   lookAddPat2(Na, A,msg1,i1);
   lookAddPat6(B,msg2,i2);
   for i : msgLen do
     if (msgs[i].msgType = aenc) then
       if (msgs[i].aencMsg = i1 & msgs[i].aencKey = i2) then
          index:=i;
       endif;
     endif;
   endfor;
   if(index=0) then
     msg_end := msg_end + 1 ;
     index := msg_end;
     msgs[index].msgType := aenc;
     msgs[index].aencMsg:=i1; 
     msgs[index].aencKey:=i2; 
   endif;
   num:=index;
   msg:=msgs[index];
 end;
---pat2: Na.A 
procedure lookAddPat2(Na:NonceType; A:AgentType; Var msg:Message; Var num : indexType);
  Var msg1, msg2: Message;
  index,i1,i2:indexType;
  begin
   index:=0;
   lookAddPat7(Na,msg1,i1);
   lookAddPat3(A,msg2,i2);
   for i : msgLen do
     if (msgs[i].msgType = concat) then
       if (msgs[i].concatPart1 = i1 & msgs[i].concatPart2 = i2) then
          index:=i;
       endif;
     endif;
   endfor;
   if(index=0) then
     msg_end := msg_end + 1 ;
     index := msg_end;
     msgs[index].msgType := concat;
     msgs[index].concatPart1:=i1; 
     msgs[index].concatPart2:=i2; 
   endif;
   num:=index;
   msg:=msgs[index];
 end;
---pat3: A 
procedure lookAddPat3(A:AgentType; Var msg:Message; Var num : indexType);
 Var index : indexType;
 begin
   index:=0;
   for i: msgLen do
     if (msgs[i].msgType = agent) then
       if (msgs[i].ag = A) then
         index:=i;
       endif;
     endif;
   endfor;
   if(index=0) then
     msg_end := msg_end + 1 ;
     index := msg_end;
     msgs[index].msgType := agent;
     msgs[index].ag:=A; 
   endif;
   num:=index;
   msg:=msgs[index];
  end;
---pat4: aenc{ < Na.Nb > }pk(A) 
procedure lookAddPat4(Na:NonceType; Nb:NonceType; A:AgentType; Var msg:Message; Var num : indexType);
  Var msg1, msg2: Message;
  index,i1,i2:indexType;
  begin
   index:=0;
   lookAddPat5(Na, Nb,msg1,i1);
   lookAddPat6(A,msg2,i2);
   for i : msgLen do
     if (msgs[i].msgType = aenc) then
       if (msgs[i].aencMsg = i1 & msgs[i].aencKey = i2) then
          index:=i;
       endif;
     endif;
   endfor;
   if(index=0) then
     msg_end := msg_end + 1 ;
     index := msg_end;
     msgs[index].msgType := aenc;
     msgs[index].aencMsg:=i1; 
     msgs[index].aencKey:=i2; 
   endif;
   num:=index;
   msg:=msgs[index];
 end;
---pat5: Na.Nb 
procedure lookAddPat5(Na:NonceType; Nb:NonceType; Var msg:Message; Var num : indexType);
  Var msg1, msg2: Message;
  index,i1,i2:indexType;
  begin
   index:=0;
   lookAddPat7(Na,msg1,i1);
   lookAddPat7(Nb,msg2,i2);
   for i : msgLen do
     if (msgs[i].msgType = concat) then
       if (msgs[i].concatPart1 = i1 & msgs[i].concatPart2 = i2) then
          index:=i;
       endif;
     endif;
   endfor;
   if(index=0) then
     msg_end := msg_end + 1 ;
     index := msg_end;
     msgs[index].msgType := concat;
     msgs[index].concatPart1:=i1; 
     msgs[index].concatPart2:=i2; 
   endif;
   num:=index;
   msg:=msgs[index];
 end;
---pat6: pk(A) 
procedure lookAddPat6(A:AgentType; Var msg:Message; Var num : indexType);
 Var index : indexType;
 begin
   index:=0;
   for i: msgLen do
     if (msgs[i].msgType = key) then
       if (msgs[i].k.encTyp = PK & msgs[i].k.ag = A) then
         index:=i;
       endif;
     endif;
   endfor;
   if(index=0) then
     msg_end := msg_end + 1 ;
     index := msg_end;
     msgs[index].msgType := key;
     msgs[index].k.encTyp:=PK; 
     msgs[index].k.ag:=A; 
   endif;
   num:=index;
   msg:=msgs[index];
  end;
---pat7: Nb 
procedure lookAddPat7(Nb:NonceType; Var msg:Message; Var num : indexType);
 Var index : indexType;
 begin
   index:=0;
   for i: msgLen do
     if(msgs[i].msgType=nonce) then
       if(msgs[i].noncePart=Nb) then
         index:=i
       endif;
     endif
   endfor;
   if(index=0) then
     msg_end := msg_end + 1 ;
     index := msg_end;
     msgs[index].msgType := nonce;
     msgs[index].noncePart:=Nb; 
   endif;
   num:=index;
   msg:=msgs[index];
  end;
---pat8: aenc{ < Nb > }pk(B) 
procedure lookAddPat8(Nb:NonceType; B:AgentType; Var msg:Message; Var num : indexType);
  Var msg1, msg2: Message;
  index,i1,i2:indexType;
  begin
   index:=0;
   lookAddPat7(Nb,msg1,i1);
   lookAddPat6(B,msg2,i2);
   for i : msgLen do
     if (msgs[i].msgType = aenc) then
       if (msgs[i].aencMsg = i1 & msgs[i].aencKey = i2) then
          index:=i;
       endif;
     endif;
   endfor;
   if(index=0) then
     msg_end := msg_end + 1 ;
     index := msg_end;
     msgs[index].msgType := aenc;
     msgs[index].aencMsg:=i1; 
     msgs[index].aencKey:=i2; 
   endif;
   num:=index;
   msg:=msgs[index];
 end;

